Resources:
  ChatBotLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Handler: lambda_function.lambda_handler
      Runtime: python3.8
      Code:
        S3Bucket: your-bucket-name
        S3Key: your-zipped-deployment-package-key
      Environment:
        Variables:
          OPENAI_API_KEY: your-openai-api-key
      Role: your-execution-role-arn
  ChatBotApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: ChatBotApi
  ChatBotResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref ChatBotApi
      ParentId: !GetAtt 
        - ChatBotApi
        - RootResourceId
      PathPart: chatbot
  ChatBotMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ChatBotApi
      ResourceId: !Ref ChatBotResource
      HttpMethod: POST
      AuthorizationType: NONE
      Integration:
        Type: AWS
        IntegrationHttpMethod: POST
        Uri: 
          Fn::Sub:
            - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaArn}/invocations
            - lambdaArn: !GetAtt ChatBotLambdaFunction.Arn
        IntegrationResponses:
          - StatusCode: 200
        RequestTemplates:
          application/json: '{"statusCode": 200}'
